<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="http://SortableJS.github.io/Sortable/Sortable.js"></script>
</head>
<body class="bg-white select-none">

    {% macro toolbar(component) %}
        <div class="toolbar">
            <button class="handle tool">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M432 320v112H320M421.8 421.77L304 304M80 192V80h112M90.2 90.23L208 208M320 80h112v112M421.77 90.2L304 208M192 432H80V320M90.23 421.8L208 304"/></svg>
            </button>
            <button class="tool" onclick="editComponent('{{ component.id }}')">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M364.13 125.25L87 403l-23 45 44.99-23 277.76-277.13-22.62-22.62zM420.69 68.69l-22.62 22.62 22.62 22.63 22.62-22.63a16 16 0 000-22.62h0a16 16 0 00-22.62 0z"/></svg>
            </button>
            <button class="tool" onclick="deleteComponent('{{ component.id }}')">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32"/><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352"/><path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32"/></svg>
            </button>
        </div>
    {% endmacro %}

    {% macro recursiveCheck(component) %}
        {% if component.props.nested %}
            <div class="sortable movable p-3 w-full relative flex {{ component.props.direction }}  {{ component.props.justify }}  {{ component.props.align }}" data-id="{{ component.id }}">
                {{ _self.toolbar(component) }}
                {% for component in component.props.list %}
                    {{ _self.recursiveCheck( component ) }}
                {% else %}
                    <div class="empty"></div>
                {% endfor %}
            </div>
        {% else %}
            <div class="relative movable" data-id="{{ component.id }}">
                {{ _self.toolbar(component) }}
                {% include '@Components/' ~ component.name ~ '.twig' with { props: component.props } %}
            </div>
        {% endif %}
    {% endmacro %}

    <div class="sortable main-content">
        {% for component in data %}
            {{ _self.recursiveCheck( component ) }}
        {% else %}
            <div class="empty"></div>
        {% endfor %}
    </div>

    <script>
        // Sample data for demonstration (this would usually come from a backend or server)
        const data = {{ data|json_encode|raw }};

        // Helper function to find and remove a component by ID
        function findAndRemoveById(id, list) {
            for (let i = 0; i < list.length; i++) {
                if (list[i].id === id) {
                    return list.splice(i, 1)[0]; // Return the removed component
                } else if (list[i].props.nested) {
                    let result = findAndRemoveById(id, list[i].props.list);
                    if (result) return result;
                }
            }
        }

        // Helper function to find a parent component by ID
        function findComponentById(id, list) {
            for (let i = 0; i < list.length; i++) {
                if (list[i].id === id) {
                    return list[i];
                } else if (list[i].props.nested) {
                    let result = findComponentById(id, list[i].props.list);
                    if (result) return result;
                }
            }
        }

        // Sync updated data structure
        function updateData(evt) {
            const fromId = evt.from.getAttribute('data-id'); // Parent of the dragged component
            const toId = evt.to.getAttribute('data-id'); // New parent of the dragged component
            const draggedId = evt.item.getAttribute('data-id'); // Dragged component's ID

            // Check if it's a simple reorder within the same container
            if (fromId === toId && evt.oldIndex === evt.newIndex) return;

            // Remove the dragged component from its original place in the data
            let draggedComponent = findAndRemoveById(draggedId, data);

            // If the target is the root, insert the component at the root level
            if (toId === null || toId === "root") {
                data.splice(evt.newIndex, 0, draggedComponent);
            } else {
                // Find the target component by ID (where the dragged item is dropped)
                let targetComponent = findComponentById(toId, data);

                // Ensure the target component can contain children (nested)
                if (targetComponent && targetComponent.props.nested) {
                    targetComponent.props.list.splice(evt.newIndex, 0, draggedComponent);
                } else {
                    // If the target is not nested, treat it as moving to root
                    data.splice(evt.newIndex, 0, draggedComponent);
                }
            }

            console.log("Updated data:", data);

            // Sync the updated data to the parent or backend
            window.parent.postMessage({
                payload: data,
            }, '*');
        }

        // Initialize Sortable options
        const option = {
            group: {
                name: 'sortable-list',
                pull: true,
                put: true,
            },
            animation: 250,
            forceFallback: true,
            emptyInsertThreshold: 10,
            handle: '.handle', // handle's class
            onEnd: function (evt) {
                updateData(evt); // Update data when the drag and drop finishes
            },
        };

        // Initialize Sortable for each container
        document.querySelectorAll(".sortable").forEach(function (container) {
            new Sortable(container, option);
        });

        function editComponent(id) {
            window.parent.postMessage({
                edit: id,
            }, '*');
        }

        function deleteComponent(id) {
            window.parent.postMessage({
                delete: id,
            }, '*');
        }
    </script>

    <style>
        .main-content {
            padding: 10px;
        }
        .movable {
            border: solid 2px transparent;
            position: relative;
        }
        .movable:hover {
            border: solid 2px #2563eb;
        }
        .movable .toolbar {
            opacity: 0;
            position: absolute;
            top: 0;
            right: 0;
            border-bottom-left-radius: 0.5rem;
            background-color: #2563eb;
            cursor: pointer;
            overflow: hidden;
            z-index: 9999;
            display: flex;
            flex-direction: row;
        }
        .movable .toolbar .tool {
            padding: 0.5rem;
        }
        .movable .toolbar .tool:nth-of-type(2) {
            border-left: solid 1px #fff3;
            border-right: solid 1px #fff3;
        }
        .movable .toolbar .tool:hover {
            background-color: #0049ea;
        }
        .movable .toolbar svg {
            width: 1rem;
            color: white;
        }
        .movable:hover .toolbar {
            opacity: 1;
        }
        .empty {
            position: absolute;
            top: 0;
            left: 0;
            border: dashed #9ca3af 4px;
            width: 100%;
            height: 100%;
            text-align: center;
            z-index: 0;
        }
    </style>
</body>
</html>
