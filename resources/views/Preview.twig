<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="http://SortableJS.github.io/Sortable/Sortable.js"></script>
    <script type="module">
        import hotwiredTurbo from 'https://cdn.skypack.dev/@hotwired/turbo@7.3.0';
    </script>
</head>
<body class="bg-white">

    {% macro toolbar(component) %}
        <div class="toolbar">
            <button class="handle tool">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M432 320v112H320M421.8 421.77L304 304M80 192V80h112M90.2 90.23L208 208M320 80h112v112M421.77 90.2L304 208M192 432H80V320M90.23 421.8L208 304"/></svg>
            </button>
            <button class="tool" onclick="editComponent('{{ component.id }}')">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M364.13 125.25L87 403l-23 45 44.99-23 277.76-277.13-22.62-22.62zM420.69 68.69l-22.62 22.62 22.62 22.63 22.62-22.63a16 16 0 000-22.62h0a16 16 0 00-22.62 0z"/></svg>
            </button>
            <button class="tool" onclick="deleteComponent('{{ component.id }}')">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M112 112l20 320c.95 18.49 14.4 32 32 32h184c17.67 0 30.87-13.51 32-32l20-320" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32"/><path stroke="currentColor" stroke-linecap="round" stroke-miterlimit="10" stroke-width="32" d="M80 112h352"/><path d="M192 112V72h0a23.93 23.93 0 0124-24h80a23.93 23.93 0 0124 24h0v40M256 176v224M184 176l8 224M328 176l-8 224" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="32"/></svg>
            </button>
        </div>
    {% endmacro %}

    {% macro recursiveCheck(component) %}
        {% if component.props.nested %}
            <div class="movable {{ component.props.list ? '' : 'empty' }} sortable relative  flex {{ component.props.direction }}  {{ component.props.justify }}  {{ component.props.align }} 
                pt-[{{ component.props.padding_top }}px] pr-[{{ component.props.padding_right }}px] pb-[{{ component.props.padding_bottom }}px] pl-[{{ component.props.padding_left }}px] 
                mt-[{{ component.props.margin_top }}px] mr-[{{ component.props.margin_right }}px] mb-[{{ component.props.margin_bottom }}px] ll-[{{ component.props.margin_left }}px] 
                bg-[{{ component.props.background_color }}] {{ component.props.background_size }} {{ component.props.background_position }} {{ component.props.background_repeat }}" style="background-image: url({{ component.props.background_image }})" data-id="{{ component.id }}">
                {{ _self.toolbar(component) }}
                {% for component in component.props.list %}
                    {{ _self.recursiveCheck( component ) }}
                {% endfor %}
            </div>
        {% else %}
            <div class="relative movable" data-id="{{ component.id }}">
                {{ _self.toolbar(component) }}
                {% include '@Components/' ~ component.name ~ '.twig' with { props: component.props } %}
            </div>
        {% endif %}
    {% endmacro %}

    <div class="sortable {{ data ? '' : 'empty' }}">
        {% for component in data %}
            {{ _self.recursiveCheck( component ) }}
        {% endfor %}
    </div>

    <script>
        (function() {
            // Sample data for demonstration (this would usually come from a backend or server)
            let data = {{ data|json_encode|raw }};

            console.log( JSON.stringify(data) );

            // Helper function to find and remove a component by ID
            function findAndRemoveById(id, list) {
                console.log( 'findAndRemoveById fired', list.length );
                for (let i = 0; i < list.length; i++) {
                    console.log( 'iterating:', i );
                    console.log( 'iterating:', list[i].id );
                    if (list[i].id == id) {
                        console.log( 'found', id );
                        return list.splice(i, 1)[0];
                    } else if (list[i].props.nested) {
                        console.log( 'find-remove: nested data', list[i] );
                        console.log( 'find-remove: looping nested', list[i].props.list );
                        let result = findAndRemoveById(id, list[i].props.list);
                        if( result ) return result;
                    }
                }
                //console.error(`find-remove Component with ID ${id} not found.`); // Log if not found
            }

            // Helper function to find a parent component by ID
            function findComponentById(id, list) {
                for (let i = 0; i < list.length; i++) {
                    if (list[i].id == id) {
                        return list[i];
                    } else if (list[i].props.nested) {
                        let result = findComponentById(id, list[i].props.list);
                        if (result) return result;
                    }
                }
                //console.error(`find Component with ID ${id} not found.`); // Log if not found
            }

            // Sync updated data structure
            function updateData(evt) {
                const fromId = evt.from.getAttribute('data-id'); // Parent of the dragged component
                const toId = evt.to.getAttribute('data-id'); // New parent of the dragged component
                const draggedId = evt.item.getAttribute('data-id'); // Dragged component's ID

                // Check if it's a simple reorder within the same container
                if (fromId === toId && evt.oldIndex === evt.newIndex) return;

                // Remove the dragged component from its original place in the data
                console.log( 'data before', data );
                console.log( 'looking for', draggedId );
                let draggedComponent = findAndRemoveById(draggedId, data);
                console.log( 'dragged component', draggedComponent );
                console.log( 'transition data: ', JSON.stringify(data) );
                if( !draggedComponent ) {
                    console.log( 'unable to find component' );
                    return;
                }

                console.log( 'toId', toId );

                // If the target is the root, insert the component at the root level
                if (toId === null || toId === "root") {
                    data.splice(evt.newIndex, 0, draggedComponent);
                } else {
                    // Find the target component by ID (where the dragged item is dropped)
                    let targetComponent = findComponentById(toId, data);
                    console.log( 'target', targetComponent );

                    // Ensure the target component can contain children (nested)
                    if (targetComponent && targetComponent.props.nested) {
                        console.log( 'target is nested' );
                        targetComponent.props.list.splice(evt.newIndex, 0, draggedComponent);
                        console.log( 'updated target', targetComponent );
                    } else {
                        // If the target is not nested, treat it as moving to root
                        data.splice(evt.newIndex, 0, draggedComponent);
                    }
                }

                console.log("Updated data: ", data);

                // Sync the updated data to the parent or backend
                window.parent.postMessage({
                    payload: data,
                }, '*');
            }

            // Initialize Sortable options
            const option = {
                group: {
                    name: 'sortable-list',
                    pull: true,
                    put: true,
                },
                draggable: '.movable',
                filter: '.non-draggable',
                animation: 250,
                forceFallback: true,
                //emptyInsertThreshold: 10,
                handle: '.handle', // handle's class
                onEnd: function (evt) {
                    updateData(evt); // Update data when the drag and drop finishes
                },
            };

            // Initialize Sortable for each container
            document.querySelectorAll(".sortable").forEach(function (container) {
                console.log("Initializing sortable for: ", container);
                new Sortable(container, option);
            });

            window.editComponent = function(id) {
                window.parent.postMessage({
                    edit: id,
                }, '*');
            }

            window.deleteComponent = function(id) {
                window.parent.postMessage({
                    delete: id,
                }, '*');
            }

            /** Receive message */
            const handleMessage = (message) => {
                if( message.origin !== window.location.origin ) return;
                if( message.data.type === 'DATA' ) {
                    const currentUrl = window.location.href;
                    const url = new URL(currentUrl);
                    const params = new URLSearchParams(url.search);
                    params.set('datainput', message.data.payload);
                    //window.history.pushState({}, '', `${url.pathname}?${params}`);
                    //window.location.href = `${url.pathname}?${params}`;
                    data = JSON.parse( message.data.payload );
                    Turbo.visit( `${url.pathname}?${params}` );
                }
            };
            window.addEventListener('message', handleMessage);
        })();
    </script>

    <style>
        body {
            user-select: none;
            padding-top: 20px;
        }
        .movable {
            border: solid 2px transparent;
            position: relative;
        }
        .movable:hover {
            border: solid 2px #2563eb;
        }
        .movable .toolbar {
            opacity: 0;
            position: absolute;
            bottom: 100%;
            left: 50%;
            border-top-left-radius: 0.5rem;
            border-top-right-radius: 0.5rem;
            background-color: #2563eb;
            cursor: pointer;
            overflow: hidden;
            z-index: 9999;
            display: flex;
            flex-direction: row;
        }
        .movable .toolbar .tool {
            padding: 0.5rem;
        }
        .movable .toolbar .tool:nth-of-type(2) {
            border-left: solid 1px #fff3;
            border-right: solid 1px #fff3;
        }
        .movable .toolbar .tool:hover {
            background-color: #0049ea;
        }
        .movable .toolbar svg {
            width: 1rem;
            color: white;
        }
        .movable:hover > .toolbar {
            opacity: 1;
        }
        .empty:before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            border: dashed #9ca3af 4px;
        }
    </style>
</body>
</html>
